/* tslint:disable */
/* eslint-disable */
export function create(configs: InstrumentationConfig[], dc_module?: string | null): InstrumentationMatcher;
/**
 * Output of a transformation operation
 */
export interface TransformOutput {
    /**
     * The transformed JavaScript code
     */
    code: string;
    /**
     * The sourcemap for the transformation (if generated)
     */
    map: string | undefined;
}

export interface InstrumentationConfig {
    channelName: string;
    module: ModuleMatcher;
    functionQuery: FunctionQuery;
}

export interface ModuleMatcher {
    name: string;
    versionRange: Range;
    filePath: string;
}

export type FunctionQuery = { className: string; methodName: string; kind: FunctionKind; index?: number } | { className: string; index?: number } | { methodName: string; kind: FunctionKind; index?: number } | { functionName: string; kind: FunctionKind; index?: number } | { expressionName: string; kind: FunctionKind; index?: number };

export type FunctionKind = "Sync" | "Async";

export type ModuleType = "esm" | "cjs" | "unknown";

export class InstrumentationMatcher {
  private constructor();
  free(): void;
  getTransformer(module_name: string, version: string, file_path: string): Transformer | undefined;
}
export class Transformer {
  private constructor();
  free(): void;
  /**
   * Transform the given JavaScript code with optional sourcemap support.
   * # Errors
   * Returns an error if the transformation fails to find injection points.
   */
  transform(code: string, module_type: ModuleType, sourcemap?: string | null): TransformOutput;
}
